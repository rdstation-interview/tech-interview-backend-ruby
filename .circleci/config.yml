version: 2.1
orbs:
  ruby: circleci/ruby@1.1.4
  gcp-gcr: circleci/gcp-gcr@0.14.1
  
jobs:
  test:
    docker:
      - image: cimg/ruby:3.1.4-node
        environment:
          COVERAGE: 'true'
          POSTGRES_URL: localhost
          RAILS_ENV: test
      - image: cimg/postgres:13.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: tech-interview-challenge_test
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run: bundle config resultadosdigitais.jfrog.io $JFROG_USERNAME:$JFROG_PASSWORD
      - ruby/install-deps
      - run:
          name: Set up DB
          command: |
            bundle exec rails db:create --trace
            bundle exec rails db:migrate
      - run: ./cc-test-reporter before-build
      - run: bundle exec rspec --profile 10
      - run:
          command: |
            if ./cc-test-reporter format-coverage -d -t simplecov -o coverage/upload.json && ! [ -z "$CC_TEST_REPORTER_ID" ]; then
               ./cc-test-reporter upload-coverage -d --input coverage/upload.json
              else
                  echo "Test doesnt exist. Skip coverage"
              fi

  build-image:
    executor: gcp-gcr/default
    environment:
      GOOGLE_COMPUTE_ZONE: us-central1-a
    steps:
      - checkout
      - run:
          name: Setup Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: tech-interview-challenge
          extra_build_args: '--build-arg JFROG_USERNAME --build-arg JFROG_PASSWORD --rm=false -t gcr.io/${GOOGLE_PROJECT_ID}/tech-interview-challenge:$CIRCLE_SHA1'
      - gcp-gcr/push-image:
          image: tech-interview-challenge
          tag: $CIRCLE_SHA1
      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  spinnaker-notify:
    machine: true
    parameters:
      production:
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: << parameters.production >>
          steps:
            - run:
                name: Export Spinnaker variables
                command: |
                  echo 'export ENDPOINT=$SPINNAKER_PRODUCTION_ENDPOINT' >> $BASH_ENV
                  echo 'export WEBHOOK_SECRET=$SPINNAKER_PRODUCTION_SECRET' >> $BASH_ENV
                  source $BASH_ENV
      - unless:
          condition: << parameters.production >>
          steps:
            - run:
                name: Export Spinnaker variables
                command: |
                  echo 'export ENDPOINT=$SPINNAKER_STAGING_ENDPOINT' >> $BASH_ENV
                  echo 'export WEBHOOK_SECRET=$SPINNAKER_STAGING_SECRET' >> $BASH_ENV
                  source $BASH_ENV
      - run:
          name: Trigger Spinnaker deploy pipeline
          command: |
            export SHORT_GIT_HASH=$(echo $CIRCLE_SHA1 | cut -c -7)
            export PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
            envsubst < ./ci-build.json > payload.json
            curl -o response.txt -s -w "%{http_code}" -i $ENDPOINT --fail -X POST -H "content-type: application/json" -d @payload.json


workflows:
  all-tests:
    jobs:
      - test:
          context: front-hub
      - build-image:
          context:
          - front-hub
          - gcr-credentials
          requires:
            - test
      - deploy-staging:
          type: approval
          requires:
           - build-image
      - spinnaker-notify:
          name: spinnaker-notify-staging
          context: 
            - gcr-credentials
          requires:
            - deploy-staging
      - spinnaker-notify:
          name: spinnaker-notify-production
          production: true
          filters:
            branches:
              only:
                - main
          context:
          - gcr-credentials
          requires:
            - build-image
